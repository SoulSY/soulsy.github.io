<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on SamTech</title>
    <link>https://soulsy.github.io/tags/java/</link>
    <description>Recent content in java on SamTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://soulsy.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design Pattern 05. Prototype Pattern</title>
      <link>https://soulsy.github.io/dev/design_pattern/prototype_pattern/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/dev/design_pattern/prototype_pattern/</guid>
      <description>Overview The Prototype pattern is a design pattern that allows the creation of objects by cloning existing objects, reducing the cost of object creation. The Prototype pattern consists of the following elements:
Prototype Interface or Abstract Class: Defines the cloning method that declares the ability to clone an object. ConcretePrototype Class: Implements the Prototype interface concretely and provides the cloning method to perform object cloning. Client: Requests the cloning operation and creates new objects.</description>
    </item>
    
    <item>
      <title>Design Pattern 04. Builder Pattern</title>
      <link>https://soulsy.github.io/dev/design_pattern/builder_pattern/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/dev/design_pattern/builder_pattern/</guid>
      <description>Overview The Builder pattern is a design pattern that provides a flexible and intuitive way to create objects. It abstracts the complex object creation process and allows users to construct objects step by step.
The Builder pattern consists of the following elements:
Director: Responsible for object creation and uses the Builder interface to construct the object. Builder: Defines the interface for object creation and provides methods to build each part of the object.</description>
    </item>
    
    <item>
      <title>Design Pattern 03. Singleton Pattern</title>
      <link>https://soulsy.github.io/dev/design_pattern/singleton_pattern/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/dev/design_pattern/singleton_pattern/</guid>
      <description>The Singleton pattern ensures that a class has only one instance of its object and provides a global access point to it.
Overview The Singleton pattern has the following characteristics:
There is only one instance of the class. It provides a global access point, allowing access to the same instance from anywhere. The Singleton pattern can be useful in various situations and is a commonly used pattern.
Advantages The Singleton pattern offers the following advantages:</description>
    </item>
    
    <item>
      <title>Design Pattern 02. Abstract Factory Pattern</title>
      <link>https://soulsy.github.io/dev/design_pattern/abstract_factory_pattern/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/dev/design_pattern/abstract_factory_pattern/</guid>
      <description>The Abstract Factory pattern is a design pattern that provides an interface for creating related objects, separating the responsibility of object creation. This pattern is useful when multiple objects that are related to each other need to be created, and it allows creating objects without depending on specific classes.
Overview The Abstract Factory pattern allows clients to create objects through an abstract factory interface instead of directly creating them. The abstract factory provides an interface for a set of related objects, and concrete factory classes implement this interface to create actual objects.</description>
    </item>
    
    <item>
      <title>Design Pattern 01. Factory Pattern</title>
      <link>https://soulsy.github.io/dev/design_pattern/factory_pattern/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/dev/design_pattern/factory_pattern/</guid>
      <description>The Factory pattern is a design pattern that encapsulates object creation, providing flexibility and extensibility. This pattern allows clients to create and retrieve objects through factory methods instead of directly instantiating them.
Overview The Factory pattern involves using factory methods to create and return objects, relieving clients from the responsibility of direct object creation. By utilizing factory methods, clients can easily create objects without being aware of the complex object creation logic.</description>
    </item>
    
  </channel>
</rss>