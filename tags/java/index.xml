<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on SoulSY&#39;s SamTech</title>
    <link>https://soulsy.github.io/tags/java/</link>
    <description>Recent content in java on SoulSY&#39;s SamTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://soulsy.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creator Pattern 01. Factory Pattern</title>
      <link>https://soulsy.github.io/dev/design_pattern/faactory_pattern/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/dev/design_pattern/faactory_pattern/</guid>
      <description>Factory Pattern The Factory pattern is a design pattern that encapsulates object creation, providing flexibility and extensibility. This pattern allows clients to create and retrieve objects through factory methods instead of directly instantiating them.
Overview of the Factory Pattern The Factory pattern involves using factory methods to create and return objects, relieving clients from the responsibility of direct object creation. By utilizing factory methods, clients can easily create objects without being aware of the complex object creation logic.</description>
    </item>
    
  </channel>
</rss>